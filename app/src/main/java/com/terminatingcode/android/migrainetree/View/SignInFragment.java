package com.terminatingcode.android.migrainetree.view;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.terminatingcode.android.migrainetree.R;
import com.terminatingcode.android.migrainetree.model.amazonaws.AWSMobileClient;
import com.terminatingcode.android.migrainetree.model.amazonaws.user.IdentityManager;
import com.terminatingcode.android.migrainetree.model.amazonaws.user.IdentityProvider;
import com.terminatingcode.android.migrainetree.model.amazonaws.user.signin.GoogleSignInProvider;
import com.terminatingcode.android.migrainetree.model.amazonaws.user.signin.SignInManager;

/**
 * Original code generated by AWS MobileHub
 * Changes made: changed Activity to Fragment
 */
public class SignInFragment extends Fragment {
    private final static String LOG_TAG = SignInFragment.class.getSimpleName();
    private SignInManager signInManager;
    private ImageButton signInButton;

    private FragmentListener mListener;
    private ProgressBar mProgressBar;

    /** Permission Request Code (Must be < 256). */
    private static final int GET_ACCOUNTS_PERMISSION_REQUEST_CODE = 93;

    /** The Google OnClick listener, since we must override it to get permissions on Marshmallow and above. */
    private View.OnClickListener googleOnClickListener;

    /**
     * SignInResultsHandler handles the final result from sign in. Making it static is a best
     * practice since it may outlive the SplashActivity's life span.
     */
    private class SignInResultsHandler implements IdentityManager.SignInResultsHandler {
        /**
         * Receives the successful sign-in result and starts the main activity.
         * @param provider the identity provider used for sign-in.
         */
        @Override
        public void onSuccess(final IdentityProvider provider) {
            Log.d(LOG_TAG, String.format("User sign-in with %s succeeded",
                    provider.getDisplayName()));
            // The sign-in manager is no longer needed once signed in.
            SignInManager.dispose();
            if(getActivity() != null) {
                Toast.makeText(getActivity(), String.format("Sign-in with %s succeeded.",
                        provider.getDisplayName()), Toast.LENGTH_LONG).show();
            }
            // Load user name and image.
            AWSMobileClient.defaultMobileClient()
                    .getIdentityManager().loadUserInfoAndImage(provider, new Runnable() {
                @Override
                public void run() {
                    Log.d(LOG_TAG, "Launching Main Activity...");
                    onSuccessfulSignIn();
                }
            });
        }


        /**
         * Recieves the sign-in result indicating the user canceled and shows a toast.
         * @param provider the identity provider with which the user attempted sign-in.
         */
        @Override
        public void onCancel(final IdentityProvider provider) {
            Log.d(LOG_TAG, String.format("User sign-in with %s canceled.",
                    provider.getDisplayName()));
            Toast.makeText(getActivity(), String.format("Sign-in with %s canceled.",
                    provider.getDisplayName()), Toast.LENGTH_LONG).show();
        }

        /**
         * Receives the sign-in result that an error occurred signing in and shows a toast.
         * @param provider the identity provider with which the user attempted sign-in.
         * @param ex the exception that occurred.
         */
        @Override
        public void onError(final IdentityProvider provider, final Exception ex) {
            if (provider != null) {
                Log.e(LOG_TAG, String.format("User Sign-in failed for %s : %s",
                        provider.getDisplayName(), ex.getMessage()), ex);
                final AlertDialog.Builder errorDialogBuilder = new AlertDialog.Builder(getActivity());
                errorDialogBuilder.setTitle("Sign-In Error");
                errorDialogBuilder.setMessage(
                        String.format("Sign-in with %s failed.\n%s", provider.getDisplayName(), ex.getMessage()));
                errorDialogBuilder.setNeutralButton("Ok", null);
                errorDialogBuilder.show();
            }else{
                Log.d(LOG_TAG, "Identity provider failed. Most likely due to moving away from fragment");
            }
        }
    }

    /**
     * Sarah: Added this method to signal to MainActivity to switch fragment
     */
    public void onSuccessfulSignIn() {
        if (mListener != null) {
            mListener.switchToHome();
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof FragmentListener) {
            mListener = (FragmentListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement FragmentListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_sign_in, container, false);
        mProgressBar = (ProgressBar) rootView.findViewById(R.id.signInProgressBar);
        signInButton = (ImageButton) rootView.findViewById(R.id.g_login_button);
        signInManager = SignInManager.getInstance(getActivity());
        signInManager.setResultsHandler(getActivity(), new SignInResultsHandler());

        // Initialize sign-in buttons.
        googleOnClickListener =
                signInManager.initializeSignInButton(GoogleSignInProvider.class, rootView.findViewById(R.id.g_login_button));

        if (googleOnClickListener != null) {
            // if the onClick listener was null, initializeSignInButton will have removed the view.
            signInButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(final View view) {
                    final Activity thisActivity = getActivity();
                    if (ContextCompat.checkSelfPermission(thisActivity,
                            Manifest.permission.GET_ACCOUNTS) != PackageManager.PERMISSION_GRANTED) {
                        ActivityCompat.requestPermissions(getActivity(),
                                new String[]{Manifest.permission.GET_ACCOUNTS},
                                GET_ACCOUNTS_PERMISSION_REQUEST_CODE);
                        return;
                    }

                    // call the Google onClick listener.
                    mProgressBar.setVisibility(View.VISIBLE);
                    googleOnClickListener.onClick(view);
                }
            });
        }
        return rootView;
    }

    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public void onRequestPermissionsResult(final int requestCode,
                                           @NonNull final String permissions[], @NonNull final int[] grantResults) {
        if (requestCode == GET_ACCOUNTS_PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0
                    && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                signInButton.callOnClick();
            } else {
                Log.i(LOG_TAG, "Permissions not granted for Google sign-in. :(");
            }
        }
    }

    @Override
    public void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        mProgressBar.setVisibility(View.GONE);
        signInManager.handleActivityResult(requestCode, resultCode, data);
    }

    @Override
    public void onResume() {
        super.onResume();

        // pause/resume Mobile Analytics collection
        AWSMobileClient.defaultMobileClient().handleOnResume();
    }

    @Override
    public void onPause() {
        super.onPause();

        // pause/resume Mobile Analytics collection
        AWSMobileClient.defaultMobileClient().handleOnPause();
    }

}